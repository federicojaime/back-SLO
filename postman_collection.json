{
	"info": {
		"_postman_id": "san-luis-opina-api-complete-v2",
		"name": "San Luis Opina CMS - API Collection COMPLETA v2.0",
		"description": "üöÄ **Colecci√≥n completa y actualizada de todas las APIs del CMS San Luis Opina**\n\n**Base URL:** http://localhost/back-SLO/public\n\n**üìà APIs Disponibles:**\n- ‚úÖ 25+ endpoints completamente funcionales\n- üì∞ Gesti√≥n completa de noticias y art√≠culos\n- üîç B√∫squeda avanzada con filtros\n- ü§ù Sistema completo de sponsors\n- üîî Modales promocionales din√°micos\n- üìß Newsletter y suscripciones\n- üìä Estad√≠sticas en tiempo real\n- üë• Gesti√≥n de usuarios (admin)\n- üìÇ Gesti√≥n de categor√≠as\n- üñºÔ∏è Upload de im√°genes\n- üîê Autenticaci√≥n y seguridad\n\n**üîê Autenticaci√≥n:**\n- APIs p√∫blicas: No requieren autenticaci√≥n\n- APIs administrativas: Requieren login como admin\n- Variables de entorno configuradas autom√°ticamente\n\n**üì± Uso Recomendado:**\n1. Configurar variable `base_url` en Environment\n2. Ejecutar tests de conectividad primero\n3. Probar APIs p√∫blicas\n4. Hacer login para APIs administrativas\n5. Validar todas las respuestas JSON\n\n**üéØ Casos de Uso Incluidos:**\n- Desarrollo de frontend\n- Testing de APIs\n- Integraci√≥n con aplicaciones m√≥viles\n- Documentaci√≥n de endpoints\n- Validaci√≥n de funcionalidades\n\n**√öltima actualizaci√≥n:** Agosto 2024\n**Versi√≥n:** 2.0 - Completamente funcional",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üè† Conectividad y Health Check",
			"description": "Endpoints para verificar la conectividad del servidor y el estado de la API",
			"item": [
				{
					"name": "Health Check - Verificar Servidor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Servidor responde correctamente', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response es JSON v√°lido', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Contiene estad√≠sticas del sitio', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('total_articles');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/stats",
							"host": ["{{base_url}}"],
							"path": ["api", "stats"]
						},
						"description": "Verifica que el servidor est√© funcionando y devuelve estad√≠sticas b√°sicas del sitio"
					},
					"response": []
				},
				{
					"name": "Test CORS Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('CORS headers est√°n presentes', function () {",
									"    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "http://localhost:3000",
								"description": "Simular request desde frontend"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/news",
							"host": ["{{base_url}}"],
							"path": ["api", "news"]
						},
						"description": "Verifica que los headers CORS est√©n configurados correctamente"
					},
					"response": []
				},
				{
					"name": "Test Database Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Base de datos conectada', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories",
							"host": ["{{base_url}}"],
							"path": ["api", "categories"]
						},
						"description": "Verifica la conexi√≥n a la base de datos mediante consulta simple"
					},
					"response": []
				}
			]
		},
		{
			"name": "üì∞ Art√≠culos y Noticias",
			"description": "Gesti√≥n completa de art√≠culos: listar, crear, editar, eliminar",
			"item": [
				{
					"name": "üìã Listar Todas las Noticias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Lista de noticias obtenida correctamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('pagination');",
									"});",
									"",
									"pm.test('Estructura de art√≠culo es correcta', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        const article = jsonData.data[0];",
									"        pm.expect(article).to.have.property('id');",
									"        pm.expect(article).to.have.property('title');",
									"        pm.expect(article).to.have.property('slug');",
									"        pm.expect(article).to.have.property('excerpt');",
									"        pm.expect(article).to.have.property('author_name');",
									"        pm.expect(article).to.have.property('category_name');",
									"        pm.expect(article).to.have.property('url');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?page=1&limit=12&category=all&featured=false",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "N√∫mero de p√°gina (1, 2, 3...)"
								},
								{
									"key": "limit",
									"value": "12",
									"description": "Art√≠culos por p√°gina (m√°x: 50)"
								},
								{
									"key": "category",
									"value": "all",
									"description": "Slug de categor√≠a o 'all'"
								},
								{
									"key": "featured",
									"value": "false",
									"description": "true para solo destacados"
								},
								{
									"key": "search",
									"value": "",
									"description": "T√©rmino de b√∫squeda",
									"disabled": true
								}
							]
						},
						"description": "Obtiene una lista paginada de art√≠culos con filtros opcionales"
					},
					"response": []
				},
				{
					"name": "‚≠ê Solo Noticias Destacadas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Solo art√≠culos destacados', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.success && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(article => {",
									"            pm.expect(article.featured).to.be.true;",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?featured=true&limit=5",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "featured",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "Obtiene solo los art√≠culos marcados como destacados"
					},
					"response": []
				},
				{
					"name": "üìù Noticias por Categor√≠a",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?category=politica&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "category",
									"value": "politica",
									"description": "Slug de la categor√≠a"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Filtra art√≠culos por una categor√≠a espec√≠fica"
					},
					"response": []
				},
				{
					"name": "üìÑ Obtener Art√≠culo Individual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Art√≠culo individual obtenido', function () {",
									"    if (pm.response.code === 200) {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('title');",
									"        pm.expect(jsonData.data).to.have.property('content');",
									"        pm.expect(jsonData.data).to.have.property('tags');",
									"        pm.expect(jsonData.data).to.have.property('related_articles');",
									"    } else if (pm.response.code === 404) {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.false;",
									"        pm.expect(jsonData).to.have.property('error');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/article/ejemplo-articulo",
							"host": ["{{base_url}}"],
							"path": ["api", "article", "ejemplo-articulo"]
						},
						"description": "Obtiene un art√≠culo completo por su slug, incluyendo contenido, tags y art√≠culos relacionados"
					},
					"response": []
				},
				{
					"name": "‚≠ê Art√≠culo Destacado Principal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Art√≠culo destacado obtenido', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('title');",
									"        pm.expect(jsonData.data).to.have.property('featured_image');",
									"        pm.expect(jsonData.data).to.have.property('url');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/featured",
							"host": ["{{base_url}}"],
							"path": ["api", "featured"]
						},
						"description": "Obtiene el art√≠culo destacado principal para mostrar en homepage"
					},
					"response": []
				},
				{
					"name": "üïí √öltimas Noticias Publicadas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/latest?limit=5",
							"host": ["{{base_url}}"],
							"path": ["api", "latest"],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"description": "Cantidad de art√≠culos (m√°x: 10)"
								}
							]
						},
						"description": "Obtiene los art√≠culos m√°s recientes ordenados por fecha de publicaci√≥n"
					},
					"response": []
				}
			]
		},
		{
			"name": "üîç B√∫squeda Avanzada",
			"description": "Sistema de b√∫squeda con m√∫ltiples filtros",
			"item": [
				{
					"name": "üîé Buscar Art√≠culos por Texto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('B√∫squeda ejecutada correctamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('query');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test('Resultados incluyen relevancia', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        const result = jsonData.data[0];",
									"        pm.expect(result).to.have.property('relevance');",
									"        pm.expect(result).to.have.property('time_ago');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/search?q=san luis&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "search"],
							"query": [
								{
									"key": "q",
									"value": "san luis",
									"description": "T√©rmino de b√∫squeda (requerido)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "L√≠mite de resultados (m√°x: 20)"
								}
							]
						},
						"description": "Busca art√≠culos por texto usando FULLTEXT search en t√≠tulo, contenido y extracto"
					},
					"response": []
				},
				{
					"name": "üîç B√∫squeda en Noticias con Filtro",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?search=gobierno&category=politica&limit=8",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "search",
									"value": "gobierno",
									"description": "Buscar en t√≠tulo y contenido"
								},
								{
									"key": "category",
									"value": "politica",
									"description": "Filtrar por categor√≠a"
								},
								{
									"key": "limit",
									"value": "8"
								}
							]
						},
						"description": "Combina b√∫squeda de texto con filtro de categor√≠a"
					},
					"response": []
				},
				{
					"name": "üéØ B√∫squeda por M√∫ltiples Criterios",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?search=educaci√≥n&featured=true&category=sociedad&limit=5",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "search",
									"value": "educaci√≥n"
								},
								{
									"key": "featured",
									"value": "true"
								},
								{
									"key": "category",
									"value": "sociedad"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "B√∫squeda avanzada combinando texto, destacados y categor√≠a"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìÇ Categor√≠as",
			"description": "Gesti√≥n del sistema de categor√≠as",
			"item": [
				{
					"name": "üìã Listar Todas las Categor√≠as",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Categor√≠as obtenidas correctamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test('Estructura de categor√≠a es correcta', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        const category = jsonData.data[0];",
									"        pm.expect(category).to.have.property('id');",
									"        pm.expect(category).to.have.property('name');",
									"        pm.expect(category).to.have.property('slug');",
									"        pm.expect(category).to.have.property('color');",
									"        pm.expect(category).to.have.property('article_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories",
							"host": ["{{base_url}}"],
							"path": ["api", "categories"]
						},
						"description": "Obtiene todas las categor√≠as activas con contador de art√≠culos"
					},
					"response": []
				},
				{
					"name": "üìä Categor√≠as con Estad√≠sticas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories?include_stats=true",
							"host": ["{{base_url}}"],
							"path": ["api", "categories"],
							"query": [
								{
									"key": "include_stats",
									"value": "true",
									"description": "Incluir estad√≠sticas detalladas"
								}
							]
						},
						"description": "Obtiene categor√≠as con estad√≠sticas extendidas"
					},
					"response": []
				}
			]
		},
		{
			"name": "ü§ù Sponsors y Publicidad",
			"description": "Gesti√≥n de patrocinadores y publicidad",
			"item": [
				{
					"name": "üè¢ Listar Sponsors Activos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Sponsors obtenidos correctamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test('Estructura de sponsor es correcta', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        const sponsor = jsonData.data[0];",
									"        pm.expect(sponsor).to.have.property('id');",
									"        pm.expect(sponsor).to.have.property('name');",
									"        pm.expect(sponsor).to.have.property('logo_url');",
									"        pm.expect(sponsor).to.have.property('priority');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sponsors",
							"host": ["{{base_url}}"],
							"path": ["api", "sponsors"]
						},
						"description": "Obtiene todos los sponsors activos ordenados por prioridad"
					},
					"response": []
				},
				{
					"name": "üéØ Sponsors por Posici√≥n",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sponsors?position=sidebar&limit=3",
							"host": ["{{base_url}}"],
							"path": ["api", "sponsors"],
							"query": [
								{
									"key": "position",
									"value": "sidebar",
									"description": "Posici√≥n espec√≠fica"
								},
								{
									"key": "limit",
									"value": "3",
									"description": "L√≠mite de sponsors"
								}
							]
						},
						"description": "Obtiene sponsors para una posici√≥n espec√≠fica"
					},
					"response": []
				}
			]
		},
		{
			"name": "üîî Modales Promocionales",
			"description": "Sistema de modales promocionales din√°micos",
			"item": [
				{
					"name": "üí¨ Obtener Modal Activo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Modal promocional obtenido', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    // El modal puede ser null si no hay ninguno activo",
									"});",
									"",
									"pm.test('Estructura del modal es correcta', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('title');",
									"        pm.expect(jsonData.data).to.have.property('content');",
									"        pm.expect(jsonData.data).to.have.property('display_frequency');",
									"        pm.expect(jsonData.data).to.have.property('position');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/promotional-modal",
							"host": ["{{base_url}}"],
							"path": ["api", "promotional-modal"]
						},
						"description": "Obtiene el modal promocional activo seg√∫n configuraci√≥n y fechas"
					},
					"response": []
				},
				{
					"name": "üé® Modales por Tipo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/promotional-modal?type=newsletter&position=center",
							"host": ["{{base_url}}"],
							"path": ["api", "promotional-modal"],
							"query": [
								{
									"key": "type",
									"value": "newsletter",
									"description": "Tipo de modal"
								},
								{
									"key": "position",
									"value": "center",
									"description": "Posici√≥n del modal"
								}
							]
						},
						"description": "Obtiene modal espec√≠fico por tipo y posici√≥n"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìß Newsletter y Suscripciones",
			"description": "Sistema de newsletter y gesti√≥n de suscriptores",
			"item": [
				{
					"name": "‚úâÔ∏è Suscribirse al Newsletter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Suscripci√≥n procesada correctamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test('Validaci√≥n de email funciona', function () {",
									"    // Este test se ejecutar√° en requests con email inv√°lido",
									"    if (pm.response.code === 400) {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.false;",
									"        pm.expect(jsonData).to.have.property('error');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"usuario@ejemplo.com\",\n    \"name\": \"Juan P√©rez\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/newsletter/subscribe",
							"host": ["{{base_url}}"],
							"path": ["api", "newsletter", "subscribe"]
						},
						"description": "Suscribe un email al newsletter con nombre opcional"
					},
					"response": []
				},
				{
					"name": "üìù Suscripci√≥n Solo con Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@sanluisopina.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/newsletter/subscribe",
							"host": ["{{base_url}}"],
							"path": ["api", "newsletter", "subscribe"]
						},
						"description": "Suscripci√≥n m√≠nima solo con email"
					},
					"response": []
				},
				{
					"name": "‚ùå Test Email Inv√°lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Email inv√°lido rechazado', function () {",
									"    pm.response.to.have.status(400);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error).to.include('inv√°lido');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"email-invalido-sin-arroba\",\n    \"name\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/newsletter/subscribe",
							"host": ["{{base_url}}"],
							"path": ["api", "newsletter", "subscribe"]
						},
						"description": "Test para validar que emails inv√°lidos son rechazados"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä Estad√≠sticas y M√©tricas",
			"description": "APIs para obtener estad√≠sticas del sitio",
			"item": [
				{
					"name": "üìà Estad√≠sticas Generales del Sitio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Estad√≠sticas obtenidas correctamente', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('total_articles');",
									"    pm.expect(jsonData.data).to.have.property('total_categories');",
									"    pm.expect(jsonData.data).to.have.property('total_views');",
									"});",
									"",
									"pm.test('Valores estad√≠sticos son n√∫meros', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.total_articles).to.be.a('number');",
									"    pm.expect(jsonData.data.total_views).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/stats",
							"host": ["{{base_url}}"],
							"path": ["api", "stats"]
						},
						"description": "Obtiene estad√≠sticas generales: art√≠culos totales, categor√≠as, vistas, etc."
					},
					"response": []
				},
				{
					"name": "üìä Estad√≠sticas por Per√≠odo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/stats?period=last_30_days&detailed=true",
							"host": ["{{base_url}}"],
							"path": ["api", "stats"],
							"query": [
								{
									"key": "period",
									"value": "last_30_days",
									"description": "Per√≠odo de estad√≠sticas"
								},
								{
									"key": "detailed",
									"value": "true",
									"description": "Incluir estad√≠sticas detalladas"
								}
							]
						},
						"description": "Estad√≠sticas filtradas por per√≠odo de tiempo"
					},
					"response": []
				},
				{
					"name": "üéØ M√©tricas de Rendimiento",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/stats/performance",
							"host": ["{{base_url}}"],
							"path": ["api", "stats", "performance"]
						},
						"description": "M√©tricas espec√≠ficas de rendimiento del sitio"
					},
					"response": []
				}
			]
		},
		{
			"name": "üîê APIs Administrativas",
			"description": "Endpoints que requieren autenticaci√≥n de administrador",
			"item": [
				{
					"name": "üîë Login Administrativo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login exitoso', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Guardar cookies de sesi√≥n para requests posteriores",
									"pm.test('Cookies de sesi√≥n establecidas', function () {",
									"    pm.expect(pm.cookies.has('PHPSESSID')).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"description": "Nombre de usuario"
								},
								{
									"key": "password",
									"value": "password",
									"description": "Contrase√±a"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": ["{{base_url}}"],
							"path": ["login"]
						},
						"description": "Autenticaci√≥n administrativa - Ejecutar antes de APIs que requieren login"
					},
					"response": []
				},
				{
					"name": "üñºÔ∏è Subir Imagen (Editor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Imagen subida correctamente', function () {",
									"    if (pm.response.code === 200) {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData).to.have.property('url');",
									"        pm.expect(jsonData.url).to.include('/uploads/');",
									"    } else {",
									"        // Si no hay autenticaci√≥n, deber√≠a ser 302 o 401",
									"        pm.expect(pm.response.code).to.be.oneOf([302, 401, 403]);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Note",
								"value": "Requiere autenticaci√≥n de administrador",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": [],
									"description": "Archivo de imagen (JPG, PNG, GIF)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/upload-image",
							"host": ["{{base_url}}"],
							"path": ["api", "upload-image"]
						},
						"description": "Sube una imagen para usar en el editor de art√≠culos"
					},
					"response": []
				},
				{
					"name": "‚úÖ Verificar Disponibilidad de Slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verificaci√≥n de slug funciona', function () {",
									"    if (pm.response.code === 200) {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('available');",
									"        pm.expect(jsonData.available).to.be.a('boolean');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"slug\": \"mi-nuevo-articulo-{{$timestamp}}\",\n    \"articleId\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/check-slug",
							"host": ["{{base_url}}"],
							"path": ["api", "check-slug"]
						},
						"description": "Verifica si un slug est√° disponible para un art√≠culo"
					},
					"response": []
				},
				{
					"name": "üìù Crear Art√≠culo",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Art√≠culo de Prueba API {{$timestamp}}",
									"description": "T√≠tulo del art√≠culo"
								},
								{
									"key": "content",
									"value": "<p>Este es un art√≠culo de prueba creado desde la API de Postman.</p><h2>Contenido de ejemplo</h2><p>M√°s contenido aqu√≠...</p>",
									"description": "Contenido HTML"
								},
								{
									"key": "excerpt",
									"value": "Extracto del art√≠culo de prueba para validar la API",
									"description": "Extracto opcional"
								},
								{
									"key": "status",
									"value": "draft",
									"description": "Estado: draft, published"
								},
								{
									"key": "category_id",
									"value": "1",
									"description": "ID de categor√≠a"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/articles/create",
							"host": ["{{base_url}}"],
							"path": ["articles", "create"]
						},
						"description": "Crea un nuevo art√≠culo (requiere autenticaci√≥n)"
					},
					"response": []
				},
				{
					"name": "üìÇ Crear Categor√≠a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Categor√≠a API {{$timestamp}}",
									"description": "Nombre de la categor√≠a"
								},
								{
									"key": "description",
									"value": "Categor√≠a creada desde la API para testing",
									"description": "Descripci√≥n opcional"
								},
								{
									"key": "color",
									"value": "#ff6b6b",
									"description": "Color hexadecimal"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/categories",
							"host": ["{{base_url}}"],
							"path": ["categories"]
						},
						"description": "Crea una nueva categor√≠a (requiere autenticaci√≥n)"
					},
					"response": []
				},
				{
					"name": "üë• Crear Usuario",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "usuario_api_{{$timestamp}}",
									"description": "Nombre de usuario √∫nico"
								},
								{
									"key": "email",
									"value": "usuario_{{$timestamp}}@ejemplo.com",
									"description": "Email √∫nico"
								},
								{
									"key": "full_name",
									"value": "Usuario API Test",
									"description": "Nombre completo"
								},
								{
									"key": "password",
									"value": "password123",
									"description": "Contrase√±a"
								},
								{
									"key": "role",
									"value": "author",
									"description": "Rol: admin, editor, author"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						},
						"description": "Crea un nuevo usuario (requiere permisos de admin)"
					},
					"response": []
				},
				{
					"name": "üîÑ Logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": ["{{base_url}}"],
							"path": ["logout"]
						},
						"description": "Cierra la sesi√≥n administrativa"
					},
					"response": []
				}
			]
		},
		{
			"name": "üß™ Tests y Ejemplos Completos",
			"description": "Casos de uso reales y tests de integraci√≥n",
			"item": [
				{
					"name": "üéØ Test Completo de Frontend",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API funciona para frontend', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('pagination');",
									"});",
									"",
									"pm.test('Datos listos para frontend', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        const article = jsonData.data[0];",
									"        pm.expect(article).to.have.property('url');",
									"        pm.expect(article).to.have.property('time_ago');",
									"        pm.expect(article).to.have.property('published_at_formatted');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?page=1&limit=6&category=all&featured=false",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "6"
								},
								{
									"key": "category",
									"value": "all"
								},
								{
									"key": "featured",
									"value": "false"
								}
							]
						},
						"description": "Test completo para validar que la API funciona perfectamente con frontend"
					},
					"response": []
				},
				{
					"name": "üöÄ Test de Performance - Carga R√°pida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time bajo 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test('API optimizada para mobile', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.at.most(3);",
									"    if (jsonData.data.length > 0) {",
									"        const article = jsonData.data[0];",
									"        pm.expect(article.featured_image).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/latest?limit=3",
							"host": ["{{base_url}}"],
							"path": ["api", "latest"],
							"query": [
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "Valida que la API responde r√°pido para uso m√≥vil"
					},
					"response": []
				},
				{
					"name": "üì± Test de Widget de Sponsors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/sponsors",
							"host": ["{{base_url}}"],
							"path": ["api", "sponsors"]
						},
						"description": "Test para widget de sponsors en sidebar"
					},
					"response": []
				},
				{
					"name": "üîÑ Test de Modal y Newsletter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/promotional-modal",
							"host": ["{{base_url}}"],
							"path": ["api", "promotional-modal"]
						},
						"description": "Test para modal promocional y newsletter"
					},
					"response": []
				},
				{
					"name": "üîó Test de Enlaces y URLs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('URLs est√°n bien formadas', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(item => {",
									"            if (item.url) {",
									"                pm.expect(item.url).to.include('/');",
									"                pm.expect(item.slug).to.not.include(' ');",
									"            }",
									"        });",
									"    }",
									"});",
									"",
									"pm.test('Im√°genes tienen URLs v√°lidas', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(item => {",
									"            if (item.featured_image) {",
									"                pm.expect(item.featured_image).to.satisfy(url => {",
									"                    return url.startsWith('http') || url.startsWith('/');",
									"                });",
									"            }",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?limit=5",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "Valida que todas las URLs y enlaces est√©n correctos"
					},
					"response": []
				}
			]
		},
		{
			"name": "‚ö° Casos de Uso Reales",
			"description": "Simulaciones de casos de uso reales del frontend",
			"item": [
				{
					"name": "üè† Homepage - Datos Completos",
					"description": "Simula la carga completa de datos para la p√°gina de inicio",
					"item": [
						{
							"name": "1Ô∏è‚É£ Art√≠culo Destacado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Art√≠culo destacado disponible', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    if (jsonData.data) {",
											"        pm.expect(jsonData.data).to.have.property('title');",
											"        pm.expect(jsonData.data).to.have.property('featured_image');",
											"        pm.expect(jsonData.data).to.have.property('excerpt');",
											"    }",
											"});",
											"",
											"// Guardar datos para uso posterior",
											"if (pm.response.json().data) {",
											"    pm.globals.set('featured_article_id', pm.response.json().data.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/featured",
									"host": ["{{base_url}}"],
									"path": ["api", "featured"]
								},
								"description": "Obtiene el art√≠culo destacado principal para la homepage"
							},
							"response": []
						},
						{
							"name": "2Ô∏è‚É£ √öltimas 6 Noticias",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/latest?limit=6",
									"host": ["{{base_url}}"],
									"path": ["api", "latest"],
									"query": [
										{
											"key": "limit",
											"value": "6"
										}
									]
								},
								"description": "Grid de noticias para homepage"
							},
							"response": []
						},
						{
							"name": "3Ô∏è‚É£ Categor√≠as del Men√∫",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/categories",
									"host": ["{{base_url}}"],
									"path": ["api", "categories"]
								},
								"description": "Categor√≠as para el men√∫ de navegaci√≥n"
							},
							"response": []
						},
						{
							"name": "4Ô∏è‚É£ Sponsors del Footer",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/sponsors",
									"host": ["{{base_url}}"],
									"path": ["api", "sponsors"]
								},
								"description": "Sponsors para mostrar en footer"
							},
							"response": []
						},
						{
							"name": "5Ô∏è‚É£ Modal Promocional",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/promotional-modal",
									"host": ["{{base_url}}"],
									"path": ["api", "promotional-modal"]
								},
								"description": "Modal promocional si est√° activo"
							},
							"response": []
						},
						{
							"name": "6Ô∏è‚É£ Estad√≠sticas Generales",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/stats",
									"host": ["{{base_url}}"],
									"path": ["api", "stats"]
								},
								"description": "Estad√≠sticas para mostrar en homepage"
							},
							"response": []
						}
					]
				},
				{
					"name": "üì∞ P√°gina de Noticias",
					"description": "Datos para p√°gina de listado de noticias con paginaci√≥n",
					"item": [
						{
							"name": "üìÑ Primera P√°gina de Noticias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Paginaci√≥n funciona correctamente', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('pagination');",
											"    pm.expect(jsonData.pagination.page).to.equal(1);",
											"    pm.expect(jsonData.pagination.limit).to.equal(12);",
											"});",
											"",
											"pm.test('Art√≠culos tienen datos completos', function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.data.length > 0) {",
											"        const article = jsonData.data[0];",
											"        pm.expect(article).to.have.property('title');",
											"        pm.expect(article).to.have.property('excerpt');",
											"        pm.expect(article).to.have.property('author_name');",
											"        pm.expect(article).to.have.property('category_name');",
											"        pm.expect(article).to.have.property('published_at_formatted');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/news?page=1&limit=12",
									"host": ["{{base_url}}"],
									"path": ["api", "news"],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "12"
										}
									]
								},
								"description": "Primera p√°gina del listado de noticias"
							},
							"response": []
						},
						{
							"name": "üìÑ Paginaci√≥n - P√°gina 2",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/news?page=2&limit=12",
									"host": ["{{base_url}}"],
									"path": ["api", "news"],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "limit",
											"value": "12"
										}
									]
								},
								"description": "Segunda p√°gina para probar paginaci√≥n"
							},
							"response": []
						},
						{
							"name": "üì± Vista M√≥vil (6 art√≠culos)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/news?page=1&limit=6",
									"host": ["{{base_url}}"],
									"path": ["api", "news"],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "6"
										}
									]
								},
								"description": "Menos art√≠culos para vista m√≥vil"
							},
							"response": []
						}
					]
				},
				{
					"name": "üîç Funcionalidad de B√∫squeda",
					"description": "Casos de uso del sistema de b√∫squeda",
					"item": [
						{
							"name": "üîé B√∫squeda: 'San Luis'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('B√∫squeda devuelve resultados relevantes', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.query).to.equal('San Luis');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});",
											"",
											"pm.test('Resultados contienen t√©rmino buscado', function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.data.length > 0) {",
											"        const hasRelevantResult = jsonData.data.some(article => ",
											"            article.title.toLowerCase().includes('san luis') ||",
											"            article.excerpt.toLowerCase().includes('san luis')",
											"        );",
											"        pm.expect(hasRelevantResult).to.be.true;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/search?q=San Luis&limit=15",
									"host": ["{{base_url}}"],
									"path": ["api", "search"],
									"query": [
										{
											"key": "q",
											"value": "San Luis"
										},
										{
											"key": "limit",
											"value": "15"
										}
									]
								},
								"description": "B√∫squeda t√≠pica de contenido local"
							},
							"response": []
						},
						{
							"name": "üîé B√∫squeda: 'gobierno'",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/search?q=gobierno&limit=10",
									"host": ["{{base_url}}"],
									"path": ["api", "search"],
									"query": [
										{
											"key": "q",
											"value": "gobierno"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								},
								"description": "B√∫squeda de temas pol√≠ticos"
							},
							"response": []
						},
						{
							"name": "üîé B√∫squeda Combinada con Filtros",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/news?search=educaci√≥n&category=sociedad&limit=8",
									"host": ["{{base_url}}"],
									"path": ["api", "news"],
									"query": [
										{
											"key": "search",
											"value": "educaci√≥n"
										},
										{
											"key": "category",
											"value": "sociedad"
										},
										{
											"key": "limit",
											"value": "8"
										}
									]
								},
								"description": "B√∫squeda con filtro de categor√≠a"
							},
							"response": []
						},
						{
							"name": "‚ùå B√∫squeda Sin Resultados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('B√∫squeda sin resultados manejada correctamente', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"    pm.expect(jsonData.data.length).to.equal(0);",
											"    pm.expect(jsonData.total).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/search?q=xyzabc123noexiste&limit=10",
									"host": ["{{base_url}}"],
									"path": ["api", "search"],
									"query": [
										{
											"key": "q",
											"value": "xyzabc123noexiste"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								},
								"description": "Test para b√∫squedas que no devuelven resultados"
							},
							"response": []
						}
					]
				},
				{
					"name": "üìñ P√°gina de Art√≠culo Individual",
					"description": "Carga completa de un art√≠culo individual",
					"item": [
						{
							"name": "üìÑ Art√≠culo Completo con Relacionados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Art√≠culo cargado completamente', function () {",
											"    if (pm.response.code === 200) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.success).to.be.true;",
											"        pm.expect(jsonData.data).to.have.property('title');",
											"        pm.expect(jsonData.data).to.have.property('content');",
											"        pm.expect(jsonData.data).to.have.property('author_name');",
											"        pm.expect(jsonData.data).to.have.property('category_name');",
											"        pm.expect(jsonData.data).to.have.property('tags');",
											"        pm.expect(jsonData.data).to.have.property('related_articles');",
											"    }",
											"});",
											"",
											"pm.test('Contador de vistas incrementado', function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.success && jsonData.data) {",
											"        pm.expect(jsonData.data.views).to.be.a('number');",
											"        pm.expect(jsonData.data.views).to.be.at.least(1);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/article/ejemplo-articulo",
									"host": ["{{base_url}}"],
									"path": ["api", "article", "ejemplo-articulo"]
								},
								"description": "Carga art√≠culo completo con contenido, tags y relacionados"
							},
							"response": []
						},
						{
							"name": "üîó Art√≠culos Relacionados Autom√°ticos",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/article/{{featured_article_slug}}",
									"host": ["{{base_url}}"],
									"path": ["api", "article", "{{featured_article_slug}}"]
								},
								"description": "Usa el slug del art√≠culo destacado obtenido anteriormente"
							},
							"response": []
						}
					]
				},
				{
					"name": "üì± App M√≥vil - APIs Optimizadas",
					"description": "APIs optimizadas para aplicaci√≥n m√≥vil",
					"item": [
						{
							"name": "üì± Feed Principal M√≥vil",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Feed m√≥vil optimizado', function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.length).to.be.at.most(8);",
											"});",
											"",
											"pm.test('Im√°genes optimizadas para m√≥vil', function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.data.length > 0) {",
											"        jsonData.data.forEach(article => {",
											"            if (article.featured_image) {",
											"                pm.expect(article.featured_image).to.exist;",
											"                pm.expect(article.featured_image_alt).to.exist;",
											"            }",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "MobileApp/1.0 (iOS)",
										"description": "Simular app m√≥vil"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/news?limit=8&featured=false",
									"host": ["{{base_url}}"],
									"path": ["api", "news"],
									"query": [
										{
											"key": "limit",
											"value": "8"
										},
										{
											"key": "featured",
											"value": "false"
										}
									]
								},
								"description": "Feed optimizado para app m√≥vil"
							},
							"response": []
						},
						{
							"name": "üì± Categor√≠as para Men√∫ M√≥vil",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "MobileApp/1.0 (Android)"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/categories",
									"host": ["{{base_url}}"],
									"path": ["api", "categories"]
								},
								"description": "Categor√≠as para men√∫ lateral m√≥vil"
							},
							"response": []
						},
						{
							"name": "üì± B√∫squeda M√≥vil R√°pida",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "MobileApp/1.0"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/search?q=noticias&limit=5",
									"host": ["{{base_url}}"],
									"path": ["api", "search"],
									"query": [
										{
											"key": "q",
											"value": "noticias"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								},
								"description": "B√∫squeda r√°pida para m√≥vil con pocos resultados"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üîß Configuraci√≥n y Variables",
			"description": "Configuraci√≥n de variables y endpoints de utilidad",
			"item": [
				{
					"name": "‚ÑπÔ∏è Informaci√≥n de la API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API informaci√≥n disponible', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Guardar informaci√≥n √∫til en variables",
									"const jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data) {",
									"    pm.globals.set('total_articles', jsonData.data.total_articles);",
									"    pm.globals.set('total_categories', jsonData.data.total_categories);",
									"    console.log('üöÄ Total de art√≠culos:', jsonData.data.total_articles);",
									"    console.log('üìÇ Total de categor√≠as:', jsonData.data.total_categories);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/stats",
							"host": ["{{base_url}}"],
							"path": ["api", "stats"]
						},
						"description": "Obtiene informaci√≥n general para configurar variables"
					},
					"response": []
				},
				{
					"name": "üîß Test de Configuraci√≥n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verificar que las variables est√©n configuradas",
									"const baseUrl = pm.collectionVariables.get('base_url');",
									"if (!baseUrl) {",
									"    pm.collectionVariables.set('base_url', 'http://localhost/back-SLO/public');",
									"    console.log('‚ö†Ô∏è Variable base_url configurada autom√°ticamente');",
									"}",
									"",
									"console.log('üîß Base URL configurada:', pm.collectionVariables.get('base_url'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Configuraci√≥n correcta', function () {",
									"    const baseUrl = pm.collectionVariables.get('base_url');",
									"    pm.expect(baseUrl).to.include('back-SLO');",
									"});",
									"",
									"pm.test('Servidor accesible', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/stats",
							"host": ["{{base_url}}"],
							"path": ["api", "stats"]
						},
						"description": "Verifica que la configuraci√≥n est√© correcta"
					},
					"response": []
				},
				{
					"name": "üìä Test de Rendimiento General",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Todas las APIs responden en tiempo razonable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Headers de seguridad presentes', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
									"});",
									"",
									"pm.test('Response structure consistente', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    if (jsonData.success) {",
									"        pm.expect(jsonData).to.have.property('data');",
									"    } else {",
									"        pm.expect(jsonData).to.have.property('error');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/news?limit=1",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Test general de rendimiento y estructura"
					},
					"response": []
				}
			]
		},
		{
			"name": "üéØ Workflows de Integraci√≥n",
			"description": "Flujos completos que simulan uso real de la API",
			"item": [
				{
					"name": "üè† Workflow: Carga Completa de Homepage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('üè† Iniciando carga completa de homepage...');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Homepage data loaded successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Preparar siguiente request",
									"setTimeout(() => {",
									"    postman.setNextRequest('2Ô∏è‚É£ √öltimas 6 Noticias');",
									"}, 100);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/featured",
							"host": ["{{base_url}}"],
							"path": ["api", "featured"]
						},
						"description": "Primer paso: cargar art√≠culo destacado"
					},
					"response": []
				},
				{
					"name": "üì± Workflow: Setup App M√≥vil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Mobile app setup successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.length > 0) {",
									"    pm.globals.set('mobile_article_count', jsonData.data.length);",
									"    console.log('üì± Art√≠culos cargados para m√≥vil:', jsonData.data.length);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "SanLuisOpina-Mobile/1.0"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/news?limit=6",
							"host": ["{{base_url}}"],
							"path": ["api", "news"],
							"query": [
								{
									"key": "limit",
									"value": "6"
								}
							]
						},
						"description": "Setup inicial para app m√≥vil"
					},
					"response": []
				},
				{
					"name": "üîç Workflow: B√∫squeda Completa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Search workflow completed', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"const results = pm.response.json();",
									"console.log('üîç B√∫squeda completada. Resultados:', results.total || 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/search?q=San Luis&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "search"],
							"query": [
								{
									"key": "q",
									"value": "San Luis"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Workflow completo de b√∫squeda"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// üöÄ Pre-request Script Avanzado para San Luis Opina API",
					"",
					"// Verificar y configurar variables autom√°ticamente",
					"if (!pm.collectionVariables.get('base_url')) {",
					"    console.log('‚ö†Ô∏è  Variable base_url no configurada. Usando valor por defecto.');",
					"    pm.collectionVariables.set('base_url', 'http://localhost/back-SLO/public');",
					"}",
					"",
					"// Configurar timestamp √∫nico para cada request",
					"pm.collectionVariables.set('timestamp', new Date().getTime());",
					"",
					"// Log de la request que se va a ejecutar",
					"console.log('üîÑ Ejecutando:', pm.request.method, pm.request.url.toString());",
					"",
					"// Configurar headers comunes para todas las requests",
					"pm.request.headers.upsert({",
					"    key: 'User-Agent',",
					"    value: 'PostmanRuntime/SanLuisOpina-API-Test/2.0'",
					"});",
					"",
					"// Configurar headers de cache para desarrollo",
					"pm.request.headers.upsert({",
					"    key: 'Cache-Control',",
					"    value: 'no-cache'",
					"});",
					"",
					"// Variables din√°micas para testing",
					"pm.collectionVariables.set('test_email', `test_${Date.now()}@sanluisopina.com`);",
					"pm.collectionVariables.set('test_slug', `test-article-${Date.now()}`);",
					"",
					"// Configurar timeout m√°s alto para requests de upload",
					"if (pm.request.url.path && pm.request.url.path.includes('upload')) {",
					"    pm.request.timeout = 30000; // 30 segundos",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// üß™ Tests autom√°ticos avanzados para todas las APIs de San Luis Opina",
					"",
					"// Test b√°sico de status - cr√≠tico para todas las APIs",
					"pm.test('‚úÖ Status code es exitoso (200-299)', function () {",
					"    pm.expect(pm.response.code).to.be.within(200, 299);",
					"});",
					"",
					"// Test de headers de seguridad",
					"pm.test('üîí Headers de seguridad presentes', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Test de estructura JSON v√°lida",
					"pm.test('üîß Response es JSON v√°lido', function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// Test de estructura de respuesta consistente",
					"pm.test('üìä Response tiene estructura consistente', function () {",
					"    const jsonData = pm.response.json();",
					"    pm.expect(jsonData).to.have.property('success');",
					"    ",
					"    if (jsonData.success === true) {",
					"        pm.expect(jsonData).to.have.property('data');",
					"    } else {",
					"        pm.expect(jsonData).to.have.property('error');",
					"    }",
					"});",
					"",
					"// Test de tiempo de respuesta optimizado",
					"pm.test('‚ö° Response time es menor a 3000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});",
					"",
					"// Test espec√≠fico para APIs de lista/array",
					"if (pm.request.url.path && ",
					"    (pm.request.url.path.includes('news') || ",
					"     pm.request.url.path.includes('categories') || ",
					"     pm.request.url.path.includes('sponsors'))) {",
					"    ",
					"    pm.test('üìã API de lista devuelve array', function () {",
					"        const jsonData = pm.response.json();",
					"        if (jsonData.success && jsonData.data) {",
					"            pm.expect(jsonData.data).to.be.an('array');",
					"        }",
					"    });",
					"}",
					"",
					"// Test espec√≠fico para APIs de b√∫squeda",
					"if (pm.request.url.path && pm.request.url.path.includes('search')) {",
					"    pm.test('üîç API de b√∫squeda incluye metadata', function () {",
					"        const jsonData = pm.response.json();",
					"        if (jsonData.success) {",
					"            pm.expect(jsonData).to.have.property('query');",
					"            pm.expect(jsonData).to.have.property('total');",
					"        }",
					"    });",
					"}",
					"",
					"// Test espec√≠fico para APIs con paginaci√≥n",
					"if (pm.request.url.query && pm.request.url.query.find(q => q.key === 'page')) {",
					"    pm.test('üìÑ API con paginaci√≥n incluye metadata', function () {",
					"        const jsonData = pm.response.json();",
					"        if (jsonData.success && pm.request.url.path.includes('news')) {",
					"            pm.expect(jsonData).to.have.property('pagination');",
					"            pm.expect(jsonData.pagination).to.have.property('page');",
					"            pm.expect(jsonData.pagination).to.have.property('limit');",
					"        }",
					"    });",
					"}",
					"",
					"// Test de CORS headers para APIs p√∫blicas",
					"if (pm.request.url.path && pm.request.url.path.includes('api')) {",
					"    pm.test('üåê CORS headers configurados correctamente', function () {",
					"        pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
					"    });",
					"}",
					"",
					"// Test de validaci√≥n de datos cr√≠ticos",
					"pm.test('üõ°Ô∏è No hay datos sensibles expuestos', function () {",
					"    const responseText = pm.response.text();",
					"    pm.expect(responseText).to.not.include('password');",
					"    pm.expect(responseText).to.not.include('secret');",
					"    pm.expect(responseText).to.not.include('private_key');",
					"});",
					"",
					"// Logging detallado de resultados",
					"const responseTime = pm.response.responseTime;",
					"const statusCode = pm.response.code;",
					"const endpoint = pm.request.url.path ? pm.request.url.path.join('/') : 'unknown';",
					"",
					"console.log(`‚ú® ${endpoint}: ${statusCode} en ${responseTime}ms`);",
					"",
					"// Guardar m√©tricas para reportes",
					"if (pm.response.json && pm.response.json().success) {",
					"    const data = pm.response.json().data;",
					"    if (Array.isArray(data)) {",
					"        console.log(`üìä Elementos devueltos: ${data.length}`);",
					"    }",
					"}",
					"",
					"// Test de rate limiting suave",
					"pm.test('üö¶ No hay indicios de rate limiting', function () {",
					"    pm.expect(pm.response.code).to.not.equal(429);",
					"    pm.expect(pm.response.code).to.not.equal(503);",
					"});",
					"",
					"// Test de encoding correcto",
					"pm.test('üî§ Encoding UTF-8 correcto', function () {",
					"    const contentType = pm.response.headers.get('Content-Type');",
					"    if (contentType) {",
					"        pm.expect(contentType).to.include('charset');",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost/back-SLO/public",
			"type": "string",
			"description": "URL base del servidor San Luis Opina"
		},
		{
			"key": "api_version",
			"value": "2.0",
			"type": "string",
			"description": "Versi√≥n de la API"
		},
		{
			"key": "timestamp",
			"value": "",
			"type": "string",
			"description": "Timestamp din√°mico para requests √∫nicos"
		},
		{
			"key": "test_email",
			"value": "test@sanluisopina.com",
			"type": "string",
			"description": "Email de prueba para newsletter"
		},
		{
			"key": "test_slug",
			"value": "test-article",
			"type": "string",
			"description": "Slug de prueba para art√≠culos"
		},
		{
			"key": "admin_username",
			"value": "admin",
			"type": "string",
			"description": "Usuario administrador para testing"
		},
		{
			"key": "admin_password",
			"value": "password",
			"type": "string",
			"description": "Contrase√±a de administrador"
		},
		{
			"key": "mobile_user_agent",
			"value": "SanLuisOpina-Mobile/1.0 (iOS)",
			"type": "string",
			"description": "User agent para simular app m√≥vil"
		}
	]
}